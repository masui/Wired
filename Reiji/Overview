■ 例示プログラミングの逆襲


★ ブラウザ上での自動プログラミング

Webブラウザが仕事の中心になっている
同じような仕事を何度もやることがあるはず

ちょっとしたカスタマイズをしたかったり

ブラウザでのプログラミングが普及すると思われる

ブラウザ上でのユーザプログラミングには
JavaScriptのブックマークレットを使う
Greasemonkey、
<a href="http://wiredvision.jp/blog/masui/200708/200708311000.html">なんでも自動処理</a>の回で
紹介したCHickenfootを使うことができる

このためにChickenFootが作られているが、
やっぱりプログラミングが必要なので
もっと楽ちんなのが欲しいと思われている

例えばChickenfootの場合、....は....のように記述する必要があります。
JavaScriptだと
location.href = "http://google.com/";

Greasemonkeyだとこのようになる
  document.getElementById('p').value = 'my search query';

However, in Chickenfoot, the equivalent line of code would be:

  enter('search the web', 'my search query');

GUI処理やブラウザ上の操作をプログラミングできるのは便利ですが、
プログラムは伝統的/古典的/traditional/昔ながらの/従来的な
テキストプログラミングの方法を使用することになっています。

この手のものはプログラマ以外には難しいかもしれない

★ 例示プログラミング

普通のユーザがプログラミングできるようにするためには
プログラミング言語やプログラミング環境を簡単にする「エンドユーザプログラミング」が良いという考えと、
プログラムのことなどよく知らなくても、このように動いて欲しいとい例を示せば
動いて欲しい状況を示せばそれなりにシステムが動くという
「例示プログラミング」が良いという考えが存在します。

テキストベースのプログラミングではなく、
ブラウザ上での実際の操作を例として示し、
それを再生
使える「プログラミング」には
「例示プログラミング

ページ内の文字列を置き換えるといった例をブラウザ上で例示することはできませんが、
リンクをクリックしたりテキストを入力したりという例は簡単に示すことができます。

テキストを入力したりページを移動したりといった普通のブラウザ操作を
「操作例」として記録しておき、これを後で再利用できるようにすることにより、
面倒な操作をある程度自動化することができるようになります。
これは単純な例示プログラミングであり、

キー操作を記録しておいて後で再生する「キーボードマクロ機能」は
様々なテキストエディタ利用することができますが、

ブラウザ上の操作を記録/再生できるようにするシステムがいくつか提案されています。

* CoScripter

CoScript

CoScripterで操作を記録する場合は
記録したい操作の開始時/終了時に
記録開始ボタン/終了ボタンをクリックする必要があります。
大抵のキーボードマクロでもこれは同様なのですが、
記録の開始と終了のタイミングを間違うこともありますし、
記録しておけば良かったと後で気付くこともあります。

ユーザの記録は常に記録しておき、
必要になったときに切り出して再利用できるようにした
ActionShot
というシステムも開発されています。


* iMacros

★ ブラウザ上のDynamic Macro

以前Emacsで動くDynamic Macroというシステムの紹介をしましたが、
KeySnailという拡張機能を利用することにより
FirefoxでもDynamic Macroが動くようになりました。

 DynamicMacro+KeySnail



どこでも自動プログラミング

 Sikuli
  SikuliでGUIの自動テスト、みたいな[[http://masui.sfc.keio.ac.jp/48bda82c1af9f7d6ab05bf88b1b1340d.pdf 論文]]があった
<a href="http://wiredvision.jp/blog/masui/200708/200708311000.html">なんでも自動処理</a>

