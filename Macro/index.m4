<!-- m4を使って記述を減らしてみた -->

include(../wired.m4)

header(マクロで楽々HTML,32)

Cのプログラムでは、定義された規則に従ってプログラム中の文字列を別の文字列に置き換える
<b>マクロ機能</b>を利用することができます。
たとえばプログラム中で以下のような記述をしておくと、

quote([#define SIZE 100])

その後に出現するcode(SIZE)という文字列はすべてcode(100)という文字列に
置き換えられるので、

quote([char array[[SIZE]];])

のような記述は

quote([char array[[100]];])

と書いたのと同じことになります。
<br>
これは100バイトのメモリ領域を確保するための宣言文であり、
この領域を利用するプログラムでは
100バイトより大きなデータをこの領域にコピーしたりしないように注意しなければなりません。
領域サイズは仕様変更などにより変更される可能性がありますから、
サイズに依存する部分では
以下の例のように「code(100)」のかわりに「code(SIZE)」と記述しておけば、
サイズの変更があってもあちこちを修正する必要がありませんし、
プログラムの意味を理解することが容易になります。

quote([if(length < SIZE){ ...])

section(文章におけるマクロの利用)

文章を書くときにもこのようなマクロ機能が使えると便利です。
「非決定性状態遷移機械」のような長い文字列が何度も出現する文を書くとき、
Cの場合と同じように

quote([#define NFSM 非決定性状態遷移機械])

のようなマクロ定義を利用することができれば、
何度も「非決定性状態遷移機械」を入力したりコピペしたりするかわりに
「NFSM」と書くだけですみますし、
表記の揺れを防ぐことができます。
また、用語を「非決定性オートマトン」に変更したくなったような場合でも、
定義部分だけ修正すればよいことになります。

<p>
文書整形システム<a href="http://ja.wikipedia.org/wiki/TeX">TeX</a>では
強力なマクロ機能を活用できるので大変便利ですが、
残念ながらHTMLにはマクロ機能がありませんから、
同じような記述を何度も書かなければならないことがよくあります。
例えば、凝ったレイアウトが必要な場合、
複数のcode(&lt;div>)タグを何段も入れ子にすることがありますが、
そのような場合は全てのcode(&lt;div>)を生真面目に記述する必要があります。
同じような記述をマクロで置き換えることができれば記述の量をかなり減らすことができます。

section(HTML + m4)

UnixやMac OSには
<a href="http://ja.wikipedia.org/wiki/M4_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E)">m4</a>
という汎用マクロプロセッサが標準搭載されています。
m4は、
C言語で有名なBrian KernighanとDennis Ritchie (K&R)が開発したマクロプロセッサで、
Kernighanの<a href="http://www.amazon.co.jp/dp/4320021428">ソフトウェア作法</a>という本で
実装法が解説されています。
C言語の普及度に比べるとm4の知名度は惨憺たるものですが、
HTMLでマクロ機能を使いたいような場合に手軽に使うと便利です。

<p>
m4ではcode([define()])でマクロを定義します。たとえば

quote([[define](NFSM,非決定性状態遷移機械)
&lt;h1>NFSM&lt;/h1>
NFSMとは...])

というテキストをm4で処理すると、
全ての「NFSM」が「非決定性状態遷移機械」で置き換えられて

quote([&lt;h1>非決定性状態遷移機械&lt;/h1>
非決定性状態遷移機械とは...])

という出力が得られます。

<p>

m4では、数値をインクリメントするcode([incr()])や、
条件判断を行なうcode([ifelse()])などを利用できるので、
以下のように、繰り返し処理を行なうcode(times)マクロを定義することができます。

quote([[define](times2,`[ifelse]($1,$2,$3,
   `times2([incr]($1),$2,$3)$3')')
[define](times,`times2(1,$1,$2)')
times(4,`&lt;br>')])

このテキストをm4で処理すると以下のような出力が得られます。

quote([&lt;br>&lt;br>&lt;br>&lt;br>])

入れ子のcode(&lt;div>)を使いたい場合は
以下のようにしてcode(div2)マクロを定義することができます。

quote([[define](div,`&lt;`div' class="$1">
`$2'
&lt;/`div'>')
[define](div2,`div(class1,div(class2,text))')])

この後に続けて

quote([div2(abc)
div2(def)])

と記述したものをm4で処理すると、

quote([&lt;div class="class1">
&lt;div class="class2">
text
&lt;/div>
&lt;/div>
&lt;div class="class1">
&lt;div class="class2">
text
&lt;/div>
&lt;/div>])

のような出力が得られます。code(div2(abc))のような記述をするだけで
長いHTMLが生成されるので便利だといえるでしょう。

<p>
定型的な記述が多いWebページでは、マクロ機能を使うと記述の量を大幅に減らすことができるでしょう。
CSSを使うことによってスタイルの記述を簡素化するのと同じように、
HTMLの本文全体にわたってマクロを利用することにより、
文書の本質的な部分に注力することができるようになるかもしれません。
m4はあらゆるUnixやMac OSに搭載されているので今すぐ使えるというメリットはありますが、
かなりプログラマ臭がするシステムであり、
普通のWebページ制作者にはとっつきにくいと思われます。
より使いやすい汎用マクロプロセッサの普及が望まれるところです。

footer($Date: 2009-06-08 07:58:52 +0900 (月, 08  6 2009) $)
